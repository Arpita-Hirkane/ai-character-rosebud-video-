<rosieArtifact title="Implement 'You Win!' Screen">
<rosieEdit file="index.html">
<![CDATA[
<<<<<<< HEAD
        vertical-align: middle;
      }
=======
        vertical-align: middle;
      }
      
      #winScreen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 182, 193, 0.8); /* Soft pink overlay */
        display: none; /* Initially hidden */
        justify-content: center;
        align-items: center;
        z-index: 1001;
        backdrop-filter: blur(5px);
        animation: fadeIn 0.5s ease-in-out;
      }
      
      .win-content {
        background: white;
        padding: 40px;
        border-radius: 20px;
        text-align: center;
        color: #ff69b4; /* Hot pink text */
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        transform: scale(0);
        animation: popIn 0.5s 0.3s ease-out forwards;
      }
      
      .win-content h1 {
        font-size: 48px;
        margin-bottom: 10px;
        color: #ff1493; /* Deep pink */
      }
      
      .win-content p {
        font-size: 20px;
        margin-bottom: 20px;
      }
      
      #restartButton {
        background: #ff69b4;
        color: white;
        border: none;
        padding: 15px 30px;
        border-radius: 10px;
        font-size: 18px;
        cursor: pointer;
        transition: background 0.3s;
      }
      
      #restartButton:hover {
        background: #ff1493;
      }
      
      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
      
      @keyframes popIn {
        from { transform: scale(0); }
        to { transform: scale(1); }
      }
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="index.html">
<![CDATA[
<<<<<<< HEAD
    </div>

    <script type="module" src="main.js"></script>
=======
    </div>

    <div id="winScreen">
      <div class="win-content">
        <h1>You Win!</h1>
        <p>You've restored all the joy to Toytopia!</p>
        <button id="restartButton">Play Again</button>
      </div>
    </div>

    <script type="module" src="main.js"></script>
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="main.js">
<![CDATA[
<<<<<<< HEAD
    this.sparkleCount = 0;
    this.currentQuest = "Welcome to Toytopia! Collect sparkles and hug sad toys to spread joy!";
    
    this.init();
    this.setupEventListeners();
    this.animate();
=======
    this.sparkleCount = 0;
    this.currentQuest = "Welcome to Toytopia! Collect sparkles and hug sad toys to spread joy!";
    this.isGameOver = false;
    this.totalCollectibles = 0;
    this.totalSadNPCs = 0;
    
    this.init();
    this.setupEventListeners();
    this.animate();
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="main.js">
<![CDATA[
<<<<<<< HEAD

    this.clock = new THREE.Clock();
  }
=======
    // Set total counts after systems are initialized
    this.totalCollectibles = this.collectibleManager.collectibles.length;
    this.totalSadNPCs = this.npcManager.npcs.filter(npc => npc.isSad).length;

    this.clock = new THREE.Clock();
  }
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="main.js">
<![CDATA[
<<<<<<< HEAD
    });
  }
=======
    });
    
    // Win screen restart button
    document.getElementById('restartButton').addEventListener('click', () => {
      window.location.reload();
    });
  }
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="main.js">
<![CDATA[
<<<<<<< HEAD
  collectSparkle() {
    this.sparkleCount++;
    this.updateUI();
    
    // Play celebration animation
    if (this.player.mixer && this.player.animations['Wave']) {
      const waveAction = this.player.animations['Wave'];
      waveAction.reset();
      waveAction.setLoop(THREE.LoopOnce);
      waveAction.stop(); // Ensure it's not already playing
      waveAction.play();
    }
  }
=======
  collectSparkle() {
    this.sparkleCount++;
    this.updateUI();
    
    // Play celebration animation
    if (this.player.mixer && this.player.animations['Wave']) {
      const waveAction = this.player.animations['Wave'];
      waveAction.reset();
      waveAction.setLoop(THREE.LoopOnce);
      waveAction.stop(); // Ensure it's not already playing
      waveAction.play();
    }
    
    this.checkWinCondition();
  }
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="main.js">
<![CDATA[
<<<<<<< HEAD
  }

  onWindowResize() {
=======
  }

  onNPCCheeredUp() {
    this.checkWinCondition();
  }
  
  checkWinCondition() {
    if (this.isGameOver) return;

    const cheeredUpNPCs = this.npcManager.npcs.filter(npc => !npc.isSad).length;
    
    // Note: We check against total collectibles because sparkles are rewarded for cheering up NPCs too.
    if (this.sparkleCount >= this.totalCollectibles && cheeredUpNPCs >= this.totalSadNPCs) {
      this.triggerWinState();
    }
  }

  triggerWinState() {
    this.isGameOver = true;
    
    // Show win screen
    const winScreen = document.getElementById('winScreen');
    winScreen.style.display = 'flex';
    
    // Disable controls
    if (this.playerController) this.playerController.enabled = false;
    if (this.cameraController) this.cameraController.disable();
    if (this.playerController && this.playerController.mobileControls) {
      this.playerController.mobileControls.destroy();
    }
  }

  onWindowResize() {
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="main.js">
<![CDATA[
<<<<<<< HEAD
    requestAnimationFrame(() => this.animate());

    const deltaTime = this.clock.getDelta();

    // Update game systems
    if (this.playerController && this.cameraController) {
      const cameraRotation = this.cameraController.update();
      this.playerController.update(deltaTime, cameraRotation);
    }
=======
    requestAnimationFrame(() => this.animate());

    if (this.isGameOver) {
        // Optional: Can add a slow-motion effect or freeze frame here
        return;
    }

    const deltaTime = this.clock.getDelta();

    // Update game systems
    if (this.playerController && this.cameraController) {
      const cameraRotation = this.cameraController.update();
      this.playerController.update(deltaTime, cameraRotation);
    }
>>>>>>> updated
]]>
</rosieEdit>
<rosieEdit file="npcs.js">
<![CDATA[
<<<<<<< HEAD
      this.game.collectSparkle();
      
      // Create celebration particles
      this.createCelebrationParticles(npc.position);
    }
=======
      this.game.collectSparkle();
      this.game.onNPCCheeredUp(); // Notify the game
      
      // Create celebration particles
      this.createCelebrationParticles(npc.position);
    }
>>>>>>> updated
]]>
</rosieEdit>
</rosieArtifact>
